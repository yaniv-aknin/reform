#!/usr/bin/env python

from __future__ import print_function

import sys
import argparse
import json

def parse_arguments(argv):
    parser = argparse.ArgumentParser()
    parser.add_argument('-e', '--on-error', choices=('exit', 'print', 'pass'), default='exit')
    parser.add_argument('-k', '--key-value', action='store_true', help="output key=value lines")
    parser.add_argument('keys', nargs='+')
    options = parser.parse_args(argv[1:])
    return options

class BadLine(Exception): pass

def main(options):
    for index, line in enumerate(sys.stdin):
        try:
            try:
                obj = json.loads(line)
            except ValueError, error:
                raise BadLine('line %d malformed: %s' % (index, error))
            output = []
            for key in options.keys:
                try:
                    value = unicode(obj[key]).encode('utf8')
                except KeyError:
                    raise BadLine('missing key %s at line %d' % (key, index))
                if options.key_value:
                    output.append("%s=%s" % (key, value))
                else:
                    output.append(value)
            try:
                print(" ".join(output))
            except IOError:
                raise SystemExit(1) # presumably broken pipe
        except BadLine, error:
            if options.on_error == 'exit':
                raise SystemExit(str(error))
            elif options.on_error == 'print':
                sys.stderr.write("%s\n" % (error,))
            # fall through to next iteration
if __name__ == '__main__':
    main(parse_arguments(sys.argv))
